{"version":3,"sources":["components/ImagesCollection.js","components/Cards.js","components/CardsList.js","components/DropDownOptions.js","components/DropDown.js","containers/App.js","serviceWorker.js","index.js"],"names":["ImagesCollection","person","src","alt","height","Cards","className","name","hair_color","skin_color","eye_color","birth_year","gender","CardsList","people","map","i","key","DropDownOptions","DropDown","cldd","onClick","App","clickDropDown","event","target","value","setState","people1","state","people2","filter","arr","this","fetch","then","result","json","data","results","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5f89085a.chunk.js","sourcesContent":["import React from 'react';\n\nconst ImagesCollection = ({ person }) => {\n\tswitch(person){\n\t\tcase \"Luke Skywalker\":\n\t\t\treturn <img src=\"https://img.pngio.com/star-wars-a-new-hope-luke-skywalker-png-by-metropolis-hero1125-on-luke-skywalker-png-802_996.png\" alt=\"img\" height=\"200px\"/>\n\t\tcase \"C-3PO\":\n\t\t\treturn <img src=\"https://www.model-space.com/media/catalog/product/cache/1/thumbnail/1280x/9df78eab33525d08d6e5fb8d27136e95/s/s/ss2171_1500.png\" alt=\"img\" height=\"200px\"/> \n\t\tcase \"R2-D2\":\n\t\t\treturn <img src=\"https://www.stickpng.com/assets/images/580b57fbd9996e24bc43bdb6.png\" alt=\"img\" height=\"200px\"/> \n\t\tcase \"Darth Vader\":\n\t\t\treturn <img src=\"https://i1.wp.com/freepngimages.com/wp-content/uploads/2015/11/darth-vader-transparent-image.png?fit=608%2C514\" alt=\"img\" height=\"200px\"/> \n\t\tcase \"Leia Organa\":\n\t\t\treturn <img src=\"https://img.pngio.com/leia-organa-png-vector-clipart-psd-peoplepngcom-leia-organa-png-400_729.png\" alt=\"img\" height=\"200px\"/> \n\t\tcase \"Owen Lars\":\n\t\t\treturn <img src=\"https://i.pinimg.com/originals/b5/3a/5a/b53a5ae9a90265578ecec1a99b0134cc.png\" alt=\"img\" height=\"200px\"/> \n\t\tcase \"Beru Whitesun lars\":\n\t\t\treturn <img src=\"http://wookiee.ru/wp-content/uploads/2014/01/berulars_detail.png\" alt=\"img\" height=\"200px\"/> \n\t\tcase \"R5-D4\":\n\t\t\treturn <img src=\"https://vignette.wikia.nocookie.net/starwars/images/7/70/R5-D4-Droidography.png/revision/latest/scale-to-width-down/180?cb=20190823071450\" alt=\"img\" height=\"200px\"/> \n\t\tcase \"Biggs Darklighter\":\n\t\t\treturn <img src=\"https://vignette.wikia.nocookie.net/swmerchandise/images/0/06/Biggs_Darklighter_with_Blaster_Pistol_%2869758%29_P.gif/revision/latest?cb=20140701000435\" alt=\"img\" height=\"200px\"/> \n\t\tcase \"Obi-Wan Kenobi\":\n\t\t\treturn <img src=\"https://img.pngio.com/star-wars-the-clone-wars-obi-wan-kenobi-png-by-metropolis-hero1125-obi-wan-png-809_988.png\" alt=\"img\" height=\"200px\"/> \n\t\tdefault:\n\t\t\treturn <img src=\"https://clipart.info/images/ccovers/1513370389Star%20Wars%20Logo%20transparent%20PNG.png\" alt=\"\" height=\"200px\"/>\t\n\t}\n}\n\nexport default ImagesCollection;","import React from 'react';\nimport ImagesCollection from './ImagesCollection';\n\nconst Cards = ({ person }) => {\n\treturn(\n\t\t<div className=\"white o-90 bg-navy dib br3 pa3 ma2 grow bw2 shadow-5\">\n\t\t\t<ImagesCollection person = {person.name}/>\t\t\n\t\t\t<h2>Name: { person.name }</h2>\n\t\t\t<h4>Height: { person.height }</h4>\n\t\t\t<h4>Hair color: { person.hair_color }</h4>\n\t\t\t<h4>Skin color: { person.skin_color }</h4>\n\t\t\t<h4>Eye color: { person.eye_color }</h4>\n\t\t\t<h4>Birthday: { person.birth_year }</h4>\n\t\t\t<h4>Gender: { person.gender }</h4>\n\t\t\t<br/>\n\t\t</div>\t\t\t\n\t)\n}\n\nexport default Cards;","import React from 'react';\nimport Cards from './Cards';\n\nconst CardsList = ({ people }) => {\n\treturn(\n\t\t<div>\n\t\t\t{people && \n\t\t\t\tpeople.map((person, i) => {\n\t\t\t\t\treturn(\n\t\t\t\t\t\t<Cards person = { people[i] } key = {i} />\t\n\t\t\t\t\t)\t\n\t\t\t\t})\t\t\t\n\t\t\t}\n\t\t</div>\n\t)\n}\n\nexport default CardsList;","import React from 'react';\n\nconst DropDownOptions = ({ name }) => {\n\treturn(\n\t\t<option>{name}</option>\n\t)\n}\n\nexport default DropDownOptions;","import React from 'react';\nimport DropDownOptions from './DropDownOptions';\n\nconst DropDown = ({ people, cldd }) => {\n\treturn(\n\t\t<div>\n\t\t\t<select onClick={ cldd }>\n\t\t\t<option>Select your character</option>\n\t\t\t{people && \n\t\t\t\tpeople.map((person, i) => {\n\t\t\t\t\treturn(\n\t\t\t\t\t\t<DropDownOptions name = { people[i].name } key = {i} />\t\n\t\t\t\t\t)\t\n\t\t\t\t})\t\t\t\n\t\t\t}\n\t\t\t</select>\n\t\t</div>\n\t)\n}\n\nexport default DropDown;","import React, { Component } from 'react';\nimport '../App.css';\nimport CardsList from '../components/CardsList';\nimport DropDown from '../components/DropDown';\nimport \"tachyons\";\n\nclass App extends Component {\n\n  constructor(){\n    super()\n    this.state = {\n      people1: \"\",\n      people2: \"\"\n    }\n  }\n\n  clickDropDown = (event) => {\n    if(event.target.value !== \"Select your character\"){\n      this.setState({ people1: this.state.people2.filter(arr => arr.name === event.target.value) })\n    }\n  }\n\n  render(){\n    return(\n      <div>\n        <img src=\"https://www.freepnglogos.com/uploads/star-wars-logo-png-8.png\" height=\"150px\" alt=\"img\"/>\n        <DropDown people = {this.state.people2} cldd = {this.clickDropDown}/>\n        <br/>\n        <CardsList people = {this.state.people1}/>\n      </div>\n    )\n  }\n\n  componentDidMount(){              \n    fetch(\"https://swapi.co/api/people\")\n      .then(result => result.json())\n      .then(data => this.setState({people2: data.results}))                            \n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}